"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/softShield.ts":
/*!***************************!*\
  !*** ./lib/softShield.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SoftShield: function() { return /* binding */ SoftShield; },\n/* harmony export */   createSoftShield: function() { return /* binding */ createSoftShield; }\n/* harmony export */ });\n/**\r\n * Soft Shield Logic for Defeat the Dragon\r\n * Detects when user leaves/hides the app and manages session interruption\r\n */ class SoftShield {\n    setupVisibilityListener() {\n        // Handle page visibility changes\n        document.addEventListener(\"visibilitychange\", ()=>{\n            if (this.state.isActive) {\n                if (document.hidden) {\n                    this.handlePageHidden();\n                } else {\n                    this.handlePageVisible();\n                }\n            }\n        });\n        // Handle window focus/blur\n        window.addEventListener(\"blur\", ()=>{\n            if (this.state.isActive) {\n                this.handlePageHidden();\n            }\n        });\n        window.addEventListener(\"focus\", ()=>{\n            if (this.state.isActive) {\n                this.handlePageVisible();\n            }\n        });\n    }\n    handlePageHidden() {\n        if (!this.state.awayStartTime) {\n            this.state.awayStartTime = Date.now();\n            console.log(\"SoftShield: Page hidden, starting away timer\");\n        }\n    }\n    handlePageVisible() {\n        if (this.state.awayStartTime) {\n            const awayTime = Math.floor((Date.now() - this.state.awayStartTime) / 1000);\n            this.state.totalAwayTime += awayTime;\n            this.state.awayStartTime = null;\n            console.log(\"SoftShield: Page visible, was away for \".concat(awayTime, \"s, total: \").concat(this.state.totalAwayTime, \"s\"));\n            if (awayTime > 0) {\n                this.state.isDisturbed = true;\n                this.onDisturbance(awayTime);\n            }\n            // Reset state when user returns, regardless of warning status\n            // This allows the warning to be dismissed when user returns in time\n            this.state.totalAwayTime = 0;\n            this.state.isDisturbed = false;\n            this.state.lastWarningTime = null;\n            console.log(\"SoftShield: User returned, resetting state and clearing warning\");\n        } else {\n            // User returned without being away, clear disturbed state\n            if (this.state.isDisturbed) {\n                this.state.isDisturbed = false;\n                console.log(\"SoftShield: User returned, clearing disturbed state\");\n            }\n        }\n    }\n    startChecking() {\n        if (this.checkInterval) {\n            clearInterval(this.checkInterval);\n        }\n        this.checkInterval = setInterval(()=>{\n            if (!this.state.isActive) return;\n            const currentTime = Date.now();\n            let currentAwayTime = this.state.totalAwayTime;\n            // Add current away time if page is hidden\n            if (this.state.awayStartTime) {\n                currentAwayTime += Math.floor((currentTime - this.state.awayStartTime) / 1000);\n            }\n            // Check for warning\n            if (currentAwayTime >= this.config.warningTime && currentAwayTime < this.config.maxAwayTime && !this.state.lastWarningTime) {\n                // Start with exactly 5 seconds for the warning countdown\n                this.onWarning(5);\n                this.state.lastWarningTime = currentTime;\n                console.log(\"SoftShield: Warning triggered - starting 5 second countdown, current away time: \".concat(currentAwayTime, \"s\"));\n            }\n            // Continue warning countdown if warning is active\n            if (this.state.lastWarningTime) {\n                const timeSinceWarning = currentTime - this.state.lastWarningTime;\n                const remainingTime = Math.max(0, 5000 - timeSinceWarning); // 5 second warning duration\n                if (remainingTime > 0) {\n                    // Calculate seconds more precisely to avoid skipping numbers\n                    const remainingSeconds = Math.max(1, Math.ceil(remainingTime / 1000));\n                    console.log(\"SoftShield: Countdown - timeSinceWarning: \".concat(timeSinceWarning, \"ms, remainingTime: \").concat(remainingTime, \"ms, remainingSeconds: \").concat(remainingSeconds, \"s\"));\n                    this.onWarning(remainingSeconds);\n                } else {\n                    // Warning time expired, session should fail\n                    console.log(\"SoftShield: Warning time expired, session should fail\");\n                    this.onWarning(0); // Send 0 before failing\n                    setTimeout(()=>this.fail(), 100); // Small delay to ensure 0 is sent\n                }\n            }\n            // Check for failure\n            if (currentAwayTime >= this.config.maxAwayTime) {\n                console.log(\"SoftShield: Max away time reached (\".concat(currentAwayTime, \"s), failing session\"));\n                this.fail();\n            }\n        }, this.config.checkInterval);\n    }\n    stopChecking() {\n        if (this.checkInterval) {\n            clearInterval(this.checkInterval);\n            this.checkInterval = null;\n        }\n    }\n    start() {\n        this.state.isActive = true;\n        this.state.isDisturbed = false;\n        this.state.awayStartTime = null;\n        this.state.totalAwayTime = 0;\n        this.state.lastWarningTime = null;\n        console.log(\"SoftShield: Started\");\n        this.startChecking();\n    }\n    stop() {\n        this.state.isActive = false;\n        this.stopChecking();\n        console.log(\"SoftShield: Stopped\");\n    }\n    fail() {\n        if (!this.state.isActive) return;\n        const totalAwayTime = this.state.totalAwayTime;\n        this.stop();\n        this.onFail(totalAwayTime);\n        console.log(\"SoftShield: Failed after \".concat(totalAwayTime, \"s away\"));\n    }\n    getState() {\n        return {\n            ...this.state\n        };\n    }\n    getCurrentAwayTime() {\n        if (!this.state.isActive) return 0;\n        let currentAwayTime = this.state.totalAwayTime;\n        if (this.state.awayStartTime) {\n            currentAwayTime += Math.floor((Date.now() - this.state.awayStartTime) / 1000);\n        }\n        return currentAwayTime;\n    }\n    reset() {\n        this.state.totalAwayTime = 0;\n        this.state.isDisturbed = false;\n        this.state.lastWarningTime = null;\n    }\n    clearDisturbed() {\n        this.state.isDisturbed = false;\n        console.log(\"SoftShield: Disturbed state cleared\");\n    }\n    constructor(config = {}, callbacks = {}){\n        this.checkInterval = null;\n        this.config = {\n            maxAwayTime: 15,\n            warningTime: 10,\n            checkInterval: 1000,\n            ...config\n        };\n        this.state = {\n            isActive: false,\n            isDisturbed: false,\n            awayStartTime: null,\n            totalAwayTime: 0,\n            lastWarningTime: null\n        };\n        this.onDisturbance = callbacks.onDisturbance || (()=>{});\n        this.onWarning = callbacks.onWarning || (()=>{});\n        this.onFail = callbacks.onFail || (()=>{});\n        this.setupVisibilityListener();\n    }\n}\n// Utility function to create a SoftShield instance\nfunction createSoftShield(config, callbacks) {\n    return new SoftShield(config, callbacks);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/softShield.ts\n"));

/***/ })

});