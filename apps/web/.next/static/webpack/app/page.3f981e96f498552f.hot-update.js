"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/softShield.ts":
/*!***************************!*\
  !*** ./lib/softShield.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SoftShield: function() { return /* binding */ SoftShield; },\n/* harmony export */   createSoftShield: function() { return /* binding */ createSoftShield; }\n/* harmony export */ });\n/**\r\n * Soft Shield Logic for Defeat the Dragon\r\n * Detects when user leaves/hides the app and manages session interruption\r\n */ class SoftShield {\n    setupVisibilityListener() {\n        // Handle page visibility changes\n        document.addEventListener(\"visibilitychange\", ()=>{\n            if (this.state.isActive) {\n                if (document.hidden) {\n                    this.handlePageHidden();\n                } else {\n                    this.handlePageVisible();\n                }\n            }\n        });\n        // Handle window focus/blur\n        window.addEventListener(\"blur\", ()=>{\n            if (this.state.isActive) {\n                this.handlePageHidden();\n            }\n        });\n        window.addEventListener(\"focus\", ()=>{\n            if (this.state.isActive) {\n                this.handlePageVisible();\n            }\n        });\n    }\n    handlePageHidden() {\n        if (!this.state.awayStartTime) {\n            this.state.awayStartTime = Date.now();\n            console.log(\"SoftShield: Page hidden, starting away timer\");\n        }\n    }\n    handlePageVisible() {\n        if (this.state.awayStartTime) {\n            const awayTime = Math.floor((Date.now() - this.state.awayStartTime) / 1000);\n            this.state.totalAwayTime += awayTime;\n            this.state.awayStartTime = null;\n            console.log(\"SoftShield: Page visible, was away for \".concat(awayTime, \"s, total: \").concat(this.state.totalAwayTime, \"s\"));\n            if (awayTime > 0) {\n                this.state.isDisturbed = true;\n                this.onDisturbance(awayTime);\n            }\n            // Reset total away time when user returns to prevent warning from persisting\n            this.state.totalAwayTime = 0;\n            this.state.isDisturbed = false;\n            this.state.lastWarningTime = null;\n            console.log(\"SoftShield: User returned, resetting state\");\n        } else {\n            // User returned without being away, clear disturbed state\n            if (this.state.isDisturbed) {\n                this.state.isDisturbed = false;\n                console.log(\"SoftShield: User returned, clearing disturbed state\");\n            }\n        }\n    }\n    startChecking() {\n        if (this.checkInterval) {\n            clearInterval(this.checkInterval);\n        }\n        this.checkInterval = setInterval(()=>{\n            if (!this.state.isActive) return;\n            const currentTime = Date.now();\n            let currentAwayTime = this.state.totalAwayTime;\n            // Add current away time if page is hidden\n            if (this.state.awayStartTime) {\n                currentAwayTime += Math.floor((currentTime - this.state.awayStartTime) / 1000);\n            }\n            // Check for warning\n            if (currentAwayTime >= this.config.warningTime && currentAwayTime < this.config.maxAwayTime && (!this.state.lastWarningTime || currentTime - this.state.lastWarningTime > 5000)) {\n                const remainingTime = this.config.maxAwayTime - currentAwayTime;\n                this.onWarning(Math.max(0, remainingTime));\n                this.state.lastWarningTime = currentTime;\n                console.log(\"SoftShield: Warning triggered - \".concat(remainingTime, \"s remaining, current away time: \").concat(currentAwayTime, \"s\"));\n            }\n            // Check for failure\n            if (currentAwayTime >= this.config.maxAwayTime) {\n                this.fail();\n            }\n        }, this.config.checkInterval);\n    }\n    stopChecking() {\n        if (this.checkInterval) {\n            clearInterval(this.checkInterval);\n            this.checkInterval = null;\n        }\n    }\n    start() {\n        this.state.isActive = true;\n        this.state.isDisturbed = false;\n        this.state.awayStartTime = null;\n        this.state.totalAwayTime = 0;\n        this.state.lastWarningTime = null;\n        console.log(\"SoftShield: Started\");\n        this.startChecking();\n    }\n    stop() {\n        this.state.isActive = false;\n        this.stopChecking();\n        console.log(\"SoftShield: Stopped\");\n    }\n    fail() {\n        if (!this.state.isActive) return;\n        const totalAwayTime = this.state.totalAwayTime;\n        this.stop();\n        this.onFail(totalAwayTime);\n        console.log(\"SoftShield: Failed after \".concat(totalAwayTime, \"s away\"));\n    }\n    getState() {\n        return {\n            ...this.state\n        };\n    }\n    getCurrentAwayTime() {\n        if (!this.state.isActive) return 0;\n        let currentAwayTime = this.state.totalAwayTime;\n        if (this.state.awayStartTime) {\n            currentAwayTime += Math.floor((Date.now() - this.state.awayStartTime) / 1000);\n        }\n        return currentAwayTime;\n    }\n    reset() {\n        this.state.totalAwayTime = 0;\n        this.state.isDisturbed = false;\n        this.state.lastWarningTime = null;\n    }\n    clearDisturbed() {\n        this.state.isDisturbed = false;\n        console.log(\"SoftShield: Disturbed state cleared\");\n    }\n    constructor(config = {}, callbacks = {}){\n        this.checkInterval = null;\n        this.config = {\n            maxAwayTime: 15,\n            warningTime: 10,\n            checkInterval: 1000,\n            ...config\n        };\n        this.state = {\n            isActive: false,\n            isDisturbed: false,\n            awayStartTime: null,\n            totalAwayTime: 0,\n            lastWarningTime: null\n        };\n        this.onDisturbance = callbacks.onDisturbance || (()=>{});\n        this.onWarning = callbacks.onWarning || (()=>{});\n        this.onFail = callbacks.onFail || (()=>{});\n        this.setupVisibilityListener();\n    }\n}\n// Utility function to create a SoftShield instance\nfunction createSoftShield(config, callbacks) {\n    return new SoftShield(config, callbacks);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxDQUFDSyxNQUFNLEdBQUc7WUFDWkUsYUFBYTtZQUNiRCxhQUFhO1lBQ2JOLGVBQWU7WUFDZixHQUFHSyxNQUFNO1FBQ1g7UUFFQSxJQUFJLENBQUN4QixLQUFLLEdBQUc7WUFDWEMsVUFBVTtZQUNWYyxhQUFhO1lBQ2JULGVBQWU7WUFDZlEsZUFBZTtZQUNmRyxpQkFBaUI7UUFDbkI7UUFFQSxJQUFJLENBQUNELGFBQWEsR0FBR3dCLFVBQVV4QixhQUFhLElBQUssTUFBTztRQUN4RCxJQUFJLENBQUNZLFNBQVMsR0FBR1ksVUFBVVosU0FBUyxJQUFLLE1BQU87UUFDaEQsSUFBSSxDQUFDTSxNQUFNLEdBQUdNLFVBQVVOLE1BQU0sSUFBSyxNQUFPO1FBRTFDLElBQUksQ0FBQ3JDLHVCQUF1QjtJQUM5QjtBQTJKRjtBQUVBLG1EQUFtRDtBQUM1QyxTQUFTNEMsaUJBQ2RqQixNQUFrQyxFQUNsQ2dCLFNBSUM7SUFFRCxPQUFPLElBQUk1QyxXQUFXNEIsUUFBUWdCO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi9zb2Z0U2hpZWxkLnRzPzkyMTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFNvZnQgU2hpZWxkIExvZ2ljIGZvciBEZWZlYXQgdGhlIERyYWdvblxyXG4gKiBEZXRlY3RzIHdoZW4gdXNlciBsZWF2ZXMvaGlkZXMgdGhlIGFwcCBhbmQgbWFuYWdlcyBzZXNzaW9uIGludGVycnVwdGlvblxyXG4gKi9cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU29mdFNoaWVsZENvbmZpZyB7XHJcbiAgbWF4QXdheVRpbWU6IG51bWJlcjsgLy8gTWF4aW11bSB0aW1lIGF3YXkgaW4gc2Vjb25kcyBiZWZvcmUgc2Vzc2lvbiBmYWlsc1xyXG4gIHdhcm5pbmdUaW1lOiBudW1iZXI7IC8vIFRpbWUgaW4gc2Vjb25kcyBiZWZvcmUgc2hvd2luZyB3YXJuaW5nXHJcbiAgY2hlY2tJbnRlcnZhbDogbnVtYmVyOyAvLyBIb3cgb2Z0ZW4gdG8gY2hlY2sgdmlzaWJpbGl0eSAobXMpXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU29mdFNoaWVsZFN0YXRlIHtcclxuICBpc0FjdGl2ZTogYm9vbGVhbjtcclxuICBpc0Rpc3R1cmJlZDogYm9vbGVhbjtcclxuICBhd2F5U3RhcnRUaW1lOiBudW1iZXIgfCBudWxsO1xyXG4gIHRvdGFsQXdheVRpbWU6IG51bWJlcjtcclxuICBsYXN0V2FybmluZ1RpbWU6IG51bWJlciB8IG51bGw7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTb2Z0U2hpZWxkIHtcclxuICBwcml2YXRlIGNvbmZpZzogU29mdFNoaWVsZENvbmZpZztcclxuICBwcml2YXRlIHN0YXRlOiBTb2Z0U2hpZWxkU3RhdGU7XHJcbiAgcHJpdmF0ZSBjaGVja0ludGVydmFsOiBOb2RlSlMuVGltZW91dCB8IG51bGwgPSBudWxsO1xyXG4gIHByaXZhdGUgb25EaXN0dXJiYW5jZTogKGF3YXlUaW1lOiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgcHJpdmF0ZSBvbldhcm5pbmc6IChyZW1haW5pbmdUaW1lOiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgcHJpdmF0ZSBvbkZhaWw6ICh0b3RhbEF3YXlUaW1lOiBudW1iZXIpID0+IHZvaWQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgY29uZmlnOiBQYXJ0aWFsPFNvZnRTaGllbGRDb25maWc+ID0ge30sXHJcbiAgICBjYWxsYmFja3M6IHtcclxuICAgICAgb25EaXN0dXJiYW5jZT86IChhd2F5VGltZTogbnVtYmVyKSA9PiB2b2lkO1xyXG4gICAgICBvbldhcm5pbmc/OiAocmVtYWluaW5nVGltZTogbnVtYmVyKSA9PiB2b2lkO1xyXG4gICAgICBvbkZhaWw/OiAodG90YWxBd2F5VGltZTogbnVtYmVyKSA9PiB2b2lkO1xyXG4gICAgfSA9IHt9XHJcbiAgKSB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgbWF4QXdheVRpbWU6IDE1LCAvLyAxNSBzZWNvbmRzXHJcbiAgICAgIHdhcm5pbmdUaW1lOiAxMCwgLy8gMTAgc2Vjb25kc1xyXG4gICAgICBjaGVja0ludGVydmFsOiAxMDAwLCAvLyBDaGVjayBldmVyeSBzZWNvbmRcclxuICAgICAgLi4uY29uZmlnLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBpc0FjdGl2ZTogZmFsc2UsXHJcbiAgICAgIGlzRGlzdHVyYmVkOiBmYWxzZSxcclxuICAgICAgYXdheVN0YXJ0VGltZTogbnVsbCxcclxuICAgICAgdG90YWxBd2F5VGltZTogMCxcclxuICAgICAgbGFzdFdhcm5pbmdUaW1lOiBudWxsLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm9uRGlzdHVyYmFuY2UgPSBjYWxsYmFja3Mub25EaXN0dXJiYW5jZSB8fCAoKCkgPT4ge30pO1xyXG4gICAgdGhpcy5vbldhcm5pbmcgPSBjYWxsYmFja3Mub25XYXJuaW5nIHx8ICgoKSA9PiB7fSk7XHJcbiAgICB0aGlzLm9uRmFpbCA9IGNhbGxiYWNrcy5vbkZhaWwgfHwgKCgpID0+IHt9KTtcclxuXHJcbiAgICB0aGlzLnNldHVwVmlzaWJpbGl0eUxpc3RlbmVyKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldHVwVmlzaWJpbGl0eUxpc3RlbmVyKCkge1xyXG4gICAgLy8gSGFuZGxlIHBhZ2UgdmlzaWJpbGl0eSBjaGFuZ2VzXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5zdGF0ZS5pc0FjdGl2ZSkge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5oaWRkZW4pIHtcclxuICAgICAgICAgIHRoaXMuaGFuZGxlUGFnZUhpZGRlbigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmhhbmRsZVBhZ2VWaXNpYmxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBIYW5kbGUgd2luZG93IGZvY3VzL2JsdXJcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5zdGF0ZS5pc0FjdGl2ZSkge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlUGFnZUhpZGRlbigpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzQWN0aXZlKSB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVQYWdlVmlzaWJsZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlUGFnZUhpZGRlbigpIHtcclxuICAgIGlmICghdGhpcy5zdGF0ZS5hd2F5U3RhcnRUaW1lKSB7XHJcbiAgICAgIHRoaXMuc3RhdGUuYXdheVN0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdTb2Z0U2hpZWxkOiBQYWdlIGhpZGRlbiwgc3RhcnRpbmcgYXdheSB0aW1lcicpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVQYWdlVmlzaWJsZSgpIHtcclxuICAgIGlmICh0aGlzLnN0YXRlLmF3YXlTdGFydFRpbWUpIHtcclxuICAgICAgY29uc3QgYXdheVRpbWUgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gdGhpcy5zdGF0ZS5hd2F5U3RhcnRUaW1lKSAvIDEwMDApO1xyXG4gICAgICB0aGlzLnN0YXRlLnRvdGFsQXdheVRpbWUgKz0gYXdheVRpbWU7XHJcbiAgICAgIHRoaXMuc3RhdGUuYXdheVN0YXJ0VGltZSA9IG51bGw7XHJcbiAgICAgIFxyXG4gICAgICBjb25zb2xlLmxvZyhgU29mdFNoaWVsZDogUGFnZSB2aXNpYmxlLCB3YXMgYXdheSBmb3IgJHthd2F5VGltZX1zLCB0b3RhbDogJHt0aGlzLnN0YXRlLnRvdGFsQXdheVRpbWV9c2ApO1xyXG4gICAgICBcclxuICAgICAgaWYgKGF3YXlUaW1lID4gMCkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuaXNEaXN0dXJiZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMub25EaXN0dXJiYW5jZShhd2F5VGltZSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFJlc2V0IHRvdGFsIGF3YXkgdGltZSB3aGVuIHVzZXIgcmV0dXJucyB0byBwcmV2ZW50IHdhcm5pbmcgZnJvbSBwZXJzaXN0aW5nXHJcbiAgICAgIHRoaXMuc3RhdGUudG90YWxBd2F5VGltZSA9IDA7XHJcbiAgICAgIHRoaXMuc3RhdGUuaXNEaXN0dXJiZWQgPSBmYWxzZTtcclxuICAgICAgdGhpcy5zdGF0ZS5sYXN0V2FybmluZ1RpbWUgPSBudWxsO1xyXG4gICAgICBjb25zb2xlLmxvZygnU29mdFNoaWVsZDogVXNlciByZXR1cm5lZCwgcmVzZXR0aW5nIHN0YXRlJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBVc2VyIHJldHVybmVkIHdpdGhvdXQgYmVpbmcgYXdheSwgY2xlYXIgZGlzdHVyYmVkIHN0YXRlXHJcbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzRGlzdHVyYmVkKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5pc0Rpc3R1cmJlZCA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdTb2Z0U2hpZWxkOiBVc2VyIHJldHVybmVkLCBjbGVhcmluZyBkaXN0dXJiZWQgc3RhdGUnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGFydENoZWNraW5nKCkge1xyXG4gICAgaWYgKHRoaXMuY2hlY2tJbnRlcnZhbCkge1xyXG4gICAgICBjbGVhckludGVydmFsKHRoaXMuY2hlY2tJbnRlcnZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jaGVja0ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICBpZiAoIXRoaXMuc3RhdGUuaXNBY3RpdmUpIHJldHVybjtcclxuXHJcbiAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgbGV0IGN1cnJlbnRBd2F5VGltZSA9IHRoaXMuc3RhdGUudG90YWxBd2F5VGltZTtcclxuXHJcbiAgICAgIC8vIEFkZCBjdXJyZW50IGF3YXkgdGltZSBpZiBwYWdlIGlzIGhpZGRlblxyXG4gICAgICBpZiAodGhpcy5zdGF0ZS5hd2F5U3RhcnRUaW1lKSB7XHJcbiAgICAgICAgY3VycmVudEF3YXlUaW1lICs9IE1hdGguZmxvb3IoKGN1cnJlbnRUaW1lIC0gdGhpcy5zdGF0ZS5hd2F5U3RhcnRUaW1lKSAvIDEwMDApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHdhcm5pbmdcclxuICAgICAgIGlmIChjdXJyZW50QXdheVRpbWUgPj0gdGhpcy5jb25maWcud2FybmluZ1RpbWUgJiYgXHJcbiAgICAgICAgICAgY3VycmVudEF3YXlUaW1lIDwgdGhpcy5jb25maWcubWF4QXdheVRpbWUgJiZcclxuICAgICAgICAgICAoIXRoaXMuc3RhdGUubGFzdFdhcm5pbmdUaW1lIHx8IFxyXG4gICAgICAgICAgICBjdXJyZW50VGltZSAtIHRoaXMuc3RhdGUubGFzdFdhcm5pbmdUaW1lID4gNTAwMCkpIHsgLy8gU2hvdyB3YXJuaW5nIGV2ZXJ5IDUgc2Vjb25kc1xyXG4gICAgICAgICBjb25zdCByZW1haW5pbmdUaW1lID0gdGhpcy5jb25maWcubWF4QXdheVRpbWUgLSBjdXJyZW50QXdheVRpbWU7XHJcbiAgICAgICAgIHRoaXMub25XYXJuaW5nKE1hdGgubWF4KDAsIHJlbWFpbmluZ1RpbWUpKTtcclxuICAgICAgICAgdGhpcy5zdGF0ZS5sYXN0V2FybmluZ1RpbWUgPSBjdXJyZW50VGltZTtcclxuICAgICAgICAgY29uc29sZS5sb2coYFNvZnRTaGllbGQ6IFdhcm5pbmcgdHJpZ2dlcmVkIC0gJHtyZW1haW5pbmdUaW1lfXMgcmVtYWluaW5nLCBjdXJyZW50IGF3YXkgdGltZTogJHtjdXJyZW50QXdheVRpbWV9c2ApO1xyXG4gICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hlY2sgZm9yIGZhaWx1cmVcclxuICAgICAgaWYgKGN1cnJlbnRBd2F5VGltZSA+PSB0aGlzLmNvbmZpZy5tYXhBd2F5VGltZSkge1xyXG4gICAgICAgIHRoaXMuZmFpbCgpO1xyXG4gICAgICB9XHJcbiAgICB9LCB0aGlzLmNvbmZpZy5jaGVja0ludGVydmFsKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RvcENoZWNraW5nKCkge1xyXG4gICAgaWYgKHRoaXMuY2hlY2tJbnRlcnZhbCkge1xyXG4gICAgICBjbGVhckludGVydmFsKHRoaXMuY2hlY2tJbnRlcnZhbCk7XHJcbiAgICAgIHRoaXMuY2hlY2tJbnRlcnZhbCA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhcnQoKSB7XHJcbiAgICB0aGlzLnN0YXRlLmlzQWN0aXZlID0gdHJ1ZTtcclxuICAgIHRoaXMuc3RhdGUuaXNEaXN0dXJiZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuc3RhdGUuYXdheVN0YXJ0VGltZSA9IG51bGw7XHJcbiAgICB0aGlzLnN0YXRlLnRvdGFsQXdheVRpbWUgPSAwO1xyXG4gICAgdGhpcy5zdGF0ZS5sYXN0V2FybmluZ1RpbWUgPSBudWxsO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnU29mdFNoaWVsZDogU3RhcnRlZCcpO1xyXG4gICAgdGhpcy5zdGFydENoZWNraW5nKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RvcCgpIHtcclxuICAgIHRoaXMuc3RhdGUuaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgIHRoaXMuc3RvcENoZWNraW5nKCk7XHJcbiAgICBjb25zb2xlLmxvZygnU29mdFNoaWVsZDogU3RvcHBlZCcpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGZhaWwoKSB7XHJcbiAgICBpZiAoIXRoaXMuc3RhdGUuaXNBY3RpdmUpIHJldHVybjtcclxuICAgIFxyXG4gICAgY29uc3QgdG90YWxBd2F5VGltZSA9IHRoaXMuc3RhdGUudG90YWxBd2F5VGltZTtcclxuICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgdGhpcy5vbkZhaWwodG90YWxBd2F5VGltZSk7XHJcbiAgICBjb25zb2xlLmxvZyhgU29mdFNoaWVsZDogRmFpbGVkIGFmdGVyICR7dG90YWxBd2F5VGltZX1zIGF3YXlgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRTdGF0ZSgpOiBTb2Z0U2hpZWxkU3RhdGUge1xyXG4gICAgcmV0dXJuIHsgLi4udGhpcy5zdGF0ZSB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEN1cnJlbnRBd2F5VGltZSgpOiBudW1iZXIge1xyXG4gICAgaWYgKCF0aGlzLnN0YXRlLmlzQWN0aXZlKSByZXR1cm4gMDtcclxuICAgIFxyXG4gICAgbGV0IGN1cnJlbnRBd2F5VGltZSA9IHRoaXMuc3RhdGUudG90YWxBd2F5VGltZTtcclxuICAgIFxyXG4gICAgaWYgKHRoaXMuc3RhdGUuYXdheVN0YXJ0VGltZSkge1xyXG4gICAgICBjdXJyZW50QXdheVRpbWUgKz0gTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtIHRoaXMuc3RhdGUuYXdheVN0YXJ0VGltZSkgLyAxMDAwKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGN1cnJlbnRBd2F5VGltZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpIHtcclxuICAgIHRoaXMuc3RhdGUudG90YWxBd2F5VGltZSA9IDA7XHJcbiAgICB0aGlzLnN0YXRlLmlzRGlzdHVyYmVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnN0YXRlLmxhc3RXYXJuaW5nVGltZSA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2xlYXJEaXN0dXJiZWQoKSB7XHJcbiAgICB0aGlzLnN0YXRlLmlzRGlzdHVyYmVkID0gZmFsc2U7XHJcbiAgICBjb25zb2xlLmxvZygnU29mdFNoaWVsZDogRGlzdHVyYmVkIHN0YXRlIGNsZWFyZWQnKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gY3JlYXRlIGEgU29mdFNoaWVsZCBpbnN0YW5jZVxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU29mdFNoaWVsZChcclxuICBjb25maWc/OiBQYXJ0aWFsPFNvZnRTaGllbGRDb25maWc+LFxyXG4gIGNhbGxiYWNrcz86IHtcclxuICAgIG9uRGlzdHVyYmFuY2U/OiAoYXdheVRpbWU6IG51bWJlcikgPT4gdm9pZDtcclxuICAgIG9uV2FybmluZz86IChyZW1haW5pbmdUaW1lOiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgICBvbkZhaWw/OiAodG90YWxBd2F5VGltZTogbnVtYmVyKSA9PiB2b2lkO1xyXG4gIH1cclxuKSB7XHJcbiAgcmV0dXJuIG5ldyBTb2Z0U2hpZWxkKGNvbmZpZywgY2FsbGJhY2tzKTtcclxufVxyXG4iXSwibmFtZXMiOlsiU29mdFNoaWVsZCIsInNldHVwVmlzaWJpbGl0eUxpc3RlbmVyIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwic3RhdGUiLCJpc0FjdGl2ZSIsImhpZGRlbiIsImhhbmRsZVBhZ2VIaWRkZW4iLCJoYW5kbGVQYWdlVmlzaWJsZSIsIndpbmRvdyIsImF3YXlTdGFydFRpbWUiLCJEYXRlIiwibm93IiwiY29uc29sZSIsImxvZyIsImF3YXlUaW1lIiwiTWF0aCIsImZsb29yIiwidG90YWxBd2F5VGltZSIsImlzRGlzdHVyYmVkIiwib25EaXN0dXJiYW5jZSIsImxhc3RXYXJuaW5nVGltZSIsInN0YXJ0Q2hlY2tpbmciLCJjaGVja0ludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiY3VycmVudFRpbWUiLCJjdXJyZW50QXdheVRpbWUiLCJjb25maWciLCJ3YXJuaW5nVGltZSIsIm1heEF3YXlUaW1lIiwicmVtYWluaW5nVGltZSIsIm9uV2FybmluZyIsIm1heCIsImZhaWwiLCJzdG9wQ2hlY2tpbmciLCJzdGFydCIsInN0b3AiLCJvbkZhaWwiLCJnZXRTdGF0ZSIsImdldEN1cnJlbnRBd2F5VGltZSIsInJlc2V0IiwiY2xlYXJEaXN0dXJiZWQiLCJjb25zdHJ1Y3RvciIsImNhbGxiYWNrcyIsImNyZWF0ZVNvZnRTaGllbGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/softShield.ts\n"));

/***/ })

});