import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import crypto from 'crypto';

// Initialize Supabase client for server-side operations
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

// Helper function to hash alpha codes (matches database function)
function hashAlphaCode(code: string): string {
  // Normalize the code (same as database function)
  const normalized = code.toUpperCase().replace(/[^A-Z0-9]/g, '');
  // Hash using SHA-256
  return crypto.createHash('sha256').update(normalized).digest('hex');
}

// Helper function to validate admin access
async function validateAdminAccess(request: NextRequest): Promise<string | null> {
  const authHeader = request.headers.get('authorization');
  
  if (!authHeader) {
    return null;
  }

  let userId: string | null = null;

  // Handle different auth token types
  if (authHeader.startsWith('Bearer ')) {
    const token = authHeader.substring(7);
    
    if (token === 'mock-token-for-development') {
      console.log('Admin API: Using mock token for development');
      userId = 'mock-admin-id';
    } else {
      try {
        const { data: { user }, error } = await supabase.auth.getUser(token);
        if (error || !user) {
          console.error('Admin API: JWT token validation failed:', error);
          return null;
        }
        userId = user.id;
      } catch (e) {
        console.error('Admin API: Error validating JWT token:', e);
        return null;
      }
    }
  } else if (authHeader.startsWith('wallet:')) {
    try {
      const walletData = JSON.parse(authHeader.substring(7));
      userId = walletData.id;
    } catch (e) {
      console.error('Admin API: Error parsing wallet token:', e);
      return null;
    }
  } else if (authHeader.startsWith('baseapp:')) {
    try {
      const baseAppData = JSON.parse(authHeader.substring(8));
      // Convert Base App numeric ID to a consistent UUID format
      userId = `baseapp-${baseAppData.id}`;
    } catch (e) {
      console.error('Admin API: Error parsing Base App token:', e);
      return null;
    }
  }

  if (!userId) {
    return null;
  }

  // Check if user is admin (you can customize this logic)
  // For now, we'll use a simple check - you can enhance this
  const { data: player } = await supabase
    .from('players')
    .select('display_name')
    .eq('user_id', userId)
    .single();

  // Add your admin validation logic here
  // For example, check if display_name contains "admin" or check a specific admin flag
  if (player?.display_name?.toLowerCase().includes('admin')) {
    return userId;
  }

  // You can also add a specific admin check here
  // const isAdmin = await checkIfUserIsAdmin(userId);
  // if (isAdmin) return userId;

  return null;
}

// GET - List all alpha codes (admin only)
export async function GET(request: NextRequest) {
  try {
    const userId = await validateAdminAccess(request);
    
    if (!userId) {
      return NextResponse.json(
        { error: 'Admin access required' },
        { status: 403 }
      );
    }

    const { data: codes, error } = await supabase
      .from('alpha_codes')
      .select('id, code_hash, used, used_by, used_at, created_at, notes')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Admin API: Error fetching alpha codes:', error);
      return NextResponse.json(
        { error: 'Failed to fetch alpha codes' },
        { status: 500 }
      );
    }

    // Return codes with usage statistics
    const totalCodes = codes.length;
    const usedCodes = codes.filter(c => c.used).length;
    const availableCodes = totalCodes - usedCodes;

    return NextResponse.json({
      codes,
      statistics: {
        total: totalCodes,
        used: usedCodes,
        available: availableCodes
      }
    });

  } catch (error) {
    console.error('Admin API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// POST - Generate new alpha codes (admin only)
export async function POST(request: NextRequest) {
  try {
    const userId = await validateAdminAccess(request);
    
    if (!userId) {
      return NextResponse.json(
        { error: 'Admin access required' },
        { status: 403 }
      );
    }

    const body = await request.json();
    const { count = 10, notes = 'Generated by admin' } = body;

    if (count < 1 || count > 100) {
      return NextResponse.json(
        { error: 'Count must be between 1 and 100' },
        { status: 400 }
      );
    }

    // Generate codes
    const codes: string[] = [];
    const alphabet = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"; // No 0/O, 1/I
    
    for (let i = 0; i < count; i++) {
      const generateCode = () => {
        const rand = (n: number) => 
          Array.from({ length: n }, () => 
            alphabet[Math.floor(Math.random() * alphabet.length)]
          ).join('');
        
        return `DTD-${rand(4)}-${rand(4)}`;
      };
      
      let code: string;
      do {
        code = generateCode();
      } while (codes.includes(code)); // Ensure uniqueness
      
      codes.push(code);
    }

    // Insert codes into database as plain text (as requested)
    const codeRecords = codes.map(code => ({
      code_hash: code, // Store as plain text
      used: false,
      notes: `${notes} - Generated by admin ${userId} - plain text`
    }));

    const { error: insertError } = await supabase
      .from('alpha_codes')
      .insert(codeRecords);

    if (insertError) {
      console.error('Admin API: Error inserting codes:', insertError);
      return NextResponse.json(
        { error: 'Failed to insert alpha codes' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      message: `Generated ${count} alpha codes`,
      codes: codes,
      statistics: {
        total: count,
        used: 0,
        available: count
      }
    });

  } catch (error) {
    console.error('Admin API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// DELETE - Clear all alpha codes (admin only)
export async function DELETE(request: NextRequest) {
  try {
    const userId = await validateAdminAccess(request);
    
    if (!userId) {
      return NextResponse.json(
        { error: 'Admin access required' },
        { status: 403 }
      );
    }

    // Clear all alpha codes
    const { error: deleteCodesError } = await supabase
      .from('alpha_codes')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000');

    if (deleteCodesError) {
      console.error('Admin API: Error deleting codes:', deleteCodesError);
      return NextResponse.json(
        { error: 'Failed to delete alpha codes' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      message: 'All alpha codes cleared'
    });

  } catch (error) {
    console.error('Admin API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
