import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import os from 'os';
import crypto from 'crypto';

// Load environment variables
dotenv.config({ path: '.env.local' });

// Helper function to hash alpha codes (matches database function)
function hashAlphaCode(code: string): string {
  // Normalize the code (same as database function)
  const normalized = code.toUpperCase().replace(/[^A-Z0-9]/g, '');
  // Hash using SHA-256
  return crypto.createHash('sha256').update(normalized).digest('hex');
}

// Admin-only alpha code management
async function adminAlphaCodes() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Missing required environment variables');
    process.exit(1);
  }

  const supabase = createClient(supabaseUrl, supabaseServiceKey);

  console.log('üîê Admin Alpha Code Management\n');

  try {
    // Get command line arguments
    const command = process.argv[2];
    const count = parseInt(process.argv[3]) || 10;

    switch (command) {
      case 'list':
        await listAlphaCodes(supabase);
        break;
      
      case 'generate':
        await generateAlphaCodes(supabase, count);
        break;
      
      case 'clear':
        await clearAlphaCodes(supabase);
        break;
      
      case 'export':
        await exportAlphaCodes(supabase);
        break;
      
      default:
        console.log('Usage: npm run admin:alpha <command> [count]');
        console.log('');
        console.log('Commands:');
        console.log('  list     - List all alpha codes');
        console.log('  generate [count] - Generate new alpha codes (default: 10)');
        console.log('  clear    - Clear all alpha codes');
        console.log('  export   - Export available codes to secure location');
        console.log('');
        console.log('Examples:');
        console.log('  npm run admin:alpha list');
        console.log('  npm run admin:alpha generate 52');
        console.log('  npm run admin:alpha clear');
        console.log('  npm run admin:alpha export');
    }

  } catch (error) {
    console.error('‚ùå Error:', error);
    process.exit(1);
  }
}

async function listAlphaCodes(supabase: any) {
  console.log('üìã Listing Alpha Codes...\n');

  const { data: codes, error } = await supabase
    .from('alpha_codes')
    .select('id, code_hash, used, used_by, used_at, created_at, notes')
    .order('created_at', { ascending: false });

  if (error) {
    console.error('‚ùå Error fetching codes:', error);
    return;
  }

  if (!codes || codes.length === 0) {
    console.log('No alpha codes found.');
    return;
  }

  const totalCodes = codes.length;
  const usedCodes = codes.filter(c => c.used).length;
  const availableCodes = totalCodes - usedCodes;

  console.log(`üìä Statistics:`);
  console.log(`   Total codes: ${totalCodes}`);
  console.log(`   Available: ${availableCodes}`);
  console.log(`   Used: ${usedCodes}\n`);

  console.log('üìã Alpha Codes:');
  console.log('=====================================\n');

  codes.forEach((code: any, index: number) => {
    const status = code.used ? '‚ùå Used' : '‚úÖ Available';
    const usedInfo = code.used ? ` (by ${code.used_by || 'unknown'})` : '';
    console.log(`${(index + 1).toString().padStart(3, '0')}. ${code.code_hash} ${status}${usedInfo}`);
  });
}

async function generateAlphaCodes(supabase: any, count: number) {
  console.log(`üîÑ Generating ${count} Alpha Codes...\n`);

  // Generate codes
  const codes: string[] = [];
  const alphabet = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"; // No 0/O, 1/I
  
  for (let i = 0; i < count; i++) {
    const generateCode = () => {
      const rand = (n: number) => 
        Array.from({ length: n }, () => 
          alphabet[Math.floor(Math.random() * alphabet.length)]
        ).join('');
      
      return `DTD-${rand(4)}-${rand(4)}`;
    };
    
    let code: string;
    do {
      code = generateCode();
    } while (codes.includes(code)); // Ensure uniqueness
    
    codes.push(code);
  }

      // Insert codes into database as plain text (as requested)
    const codeRecords = codes.map(code => ({
      code_hash: code, // Store as plain text
      used: false,
      notes: `Generated by admin script - plain text - ${new Date().toISOString()}`
    }));

  const { error: insertError } = await supabase
    .from('alpha_codes')
    .insert(codeRecords);

  if (insertError) {
    console.error('‚ùå Error inserting codes:', insertError);
    return;
  }

  console.log(`‚úÖ Generated ${count} alpha codes successfully!\n`);

  console.log('üìã Generated Codes:');
  console.log('=====================================\n');

  codes.forEach((code, index) => {
    console.log(`${(index + 1).toString().padStart(2, '0')}. ${code}`);
  });

  console.log('\nüí° Tip: Use "npm run admin:alpha export" to save codes to a secure location');
}

async function clearAlphaCodes(supabase: any) {
  console.log('üóëÔ∏è  Clearing All Alpha Codes...\n');

  // Clear all alpha codes
  const { error: deleteCodesError } = await supabase
    .from('alpha_codes')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000');

  if (deleteCodesError) {
    console.error('‚ùå Error deleting codes:', deleteCodesError);
    return;
  }

  console.log('‚úÖ All alpha codes cleared successfully!');
}

async function exportAlphaCodes(supabase: any) {
  console.log('üì§ Exporting Alpha Codes...\n');

  // Fetch codes from database
  const { data: codes, error } = await supabase
    .from('alpha_codes')
    .select('code_hash, used, created_at, notes')
    .eq('used', false)
    .order('created_at', { ascending: true });

  if (error) {
    console.error('‚ùå Error fetching codes:', error);
    return;
  }

  if (!codes || codes.length === 0) {
    console.log('‚ùå No available alpha codes found!');
    console.log('   Generate some codes first: npm run admin:alpha generate 10');
    return;
  }

  // Create output directory in user's home directory (outside repo)
  const outputDir = path.join(os.homedir(), 'alpha_codes_export');
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  
  // Create formatted file
  const formattedPath = path.join(outputDir, `alpha_codes_${timestamp}.txt`);
  const codeList = codes.map((code: any, index: number) => 
    `${(index + 1).toString().padStart(2, '0')}. [HASHED CODE - Use admin panel to view]`
  ).join('\n');

  const formattedContent = `Alpha Codes for Testing
Generated on: ${new Date().toISOString()}
Total codes: ${codes.length}

${codeList}

Instructions for testers:
1. Go to the app signup page
2. Enter one of the codes above
3. Complete the signup process
4. Each code can only be used once

Note: These codes are for testing purposes only and will be reset before production.
`;

  fs.writeFileSync(formattedPath, formattedContent);

  // Create simple list
  const simplePath = path.join(outputDir, `alpha_codes_simple_${timestamp}.txt`);
  const simpleContent = codes.map((code: any) => '[HASHED CODE - Use admin panel to view]').join('\n');
  fs.writeFileSync(simplePath, simpleContent);

  // Create CSV
  const csvPath = path.join(outputDir, `alpha_codes_${timestamp}.csv`);
  const csvContent = `Code Number,Alpha Code,Status\n${codes.map((code: any, index: number) => 
    `${index + 1},[HASHED CODE - Use admin panel to view],Available`
  ).join('\n')}`;
  fs.writeFileSync(csvPath, csvContent);

  console.log(`‚úÖ Exported ${codes.length} alpha codes to:`);
  console.log(`   üìÅ Directory: ${outputDir}`);
  console.log(`   üìÑ Formatted: ${path.basename(formattedPath)}`);
  console.log(`   üìù Simple: ${path.basename(simplePath)}`);
  console.log(`   üìä CSV: ${path.basename(csvPath)}`);

  console.log('\nüìã First 10 codes (for verification):');
  console.log('=====================================\n');

  codes.slice(0, 10).forEach((code: any, index: number) => {
    console.log(`${(index + 1).toString().padStart(2, '0')}. [HASHED CODE - Use admin panel to view]`);
  });

  if (codes.length > 10) {
    console.log(`... and ${codes.length - 10} more codes`);
  }

  console.log('\nüîí Security: Files are saved outside your repository');
  console.log('   They will NOT be committed to Git');
}

// Run the script if called directly
if (require.main === module) {
  adminAlphaCodes();
}

export { adminAlphaCodes };
